/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doti.gca.view;

import br.com.doti.AttributeContentOID1;
import br.com.doti.AttributeContentOID2;
import br.com.doti.StudentACException;
import br.com.doti.StudentACInfoGenerator;
import br.com.doti.util.ACSigner;
import doti.gca.dao.RemoteHttp;
import doti.gca.exception.GCAException;
import doti.gca.util.GCABase64;
import doti.gca.util.Item;
import doti.gca.util.KeyStoreLoader;
import java.io.IOException;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.table.TableModel;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.asn1.x500.style.BCStyle;
import org.bouncycastle.asn1.x509.AttributeCertificate;
import org.bouncycastle.asn1.x509.AttributeCertificateInfo;
import org.bouncycastle.asn1.x509.X509Name;
import org.json.JSONArray;
import org.json.JSONObject;
import static sun.security.krb5.Confounder.bytes;

/**
 *
 * @author vinicius
 */
public class PrincipalFrame extends javax.swing.JFrame {

    /**
     * Creates new form PrincipalFrame
     */
    public PrincipalFrame() {
        initComponents();
        populate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnExecutar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        progresbar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DOTI - Gerador de Certificado de Atributo");
        setPreferredSize(new java.awt.Dimension(776, 575));
        setSize(new java.awt.Dimension(600, 400));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Certificados Disponíveis"));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Emitido para", "Válido de ", "Válido até", "Emitido por"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setFillsViewportHeight(true);
        jTable3.setMinimumSize(new java.awt.Dimension(60, 150));
        jTable3.setRowHeight(25);
        jTable3.setShowHorizontalLines(false);
        jTable3.setShowVerticalLines(false);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        jTable3.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ações"));

        btnExecutar.setText("Executar");
        btnExecutar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnExecutar.setEnabled(false);
        btnExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecutarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnExecutar, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.add(jPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Progresso"));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        progresbar.setAutoscrolls(true);
        progresbar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        progresbar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        progresbar.setMaximumSize(new java.awt.Dimension(32767, 23));
        progresbar.setPreferredSize(new java.awt.Dimension(150, 25));
        progresbar.setStringPainted(true);
        jPanel3.add(progresbar);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecutarActionPerformed
        try {
            progresbar.setValue(5);
            txtLog.append("Carregando certificado...\n");
            // Carrega dados do certificado
            int linhaSelecionada = jTable3.getSelectedRow();
            String alias = ((Item) dados[linhaSelecionada][0]).getAlias();
            X509Certificate certificado = KeyStoreLoader.loadCertificado(alias);
            PrivateKey chavePrivada = KeyStoreLoader.loadPrivateKey(alias);
            progresbar.setValue(progresbar.getValue()+5);           
            
            txtLog.append("Carregando token de acesso a API...\n");
            // Requisita token para acessar a api
            String token = JOptionPane.showInputDialog(new JPasswordField(),
                    "Insira o token de acesso ao Servidor.", "Token de acesso", JOptionPane.PLAIN_MESSAGE);
            progresbar.setValue(progresbar.getValue()+1);
            
            txtLog.append("Carregando carteirinhas...\n");
            // Carrega carteirinhas da api
            JSONObject json = RemoteHttp.getCarteirinhas(token);
            JSONArray carteirinhas = json.getJSONArray("carteirinhas");            
            progresbar.setValue(progresbar.getValue()+10);
            
            // Cria JSONArray para enviar certificados 
            JSONArray certificadosJSON = new JSONArray();
            
            // Itera sobre as carteirinhas baixadas
            txtLog.append("Criando certificados...\n");
            Iterator it = carteirinhas.iterator();
            int acrecimo = 80/carteirinhas.length();
            while(it.hasNext()){
                JSONObject carteirinha = (JSONObject) it.next();
                // Cria certificado
                AttributeCertificate ca = createCertificado(certificado, 
                        chavePrivada, carteirinha);
                JSONObject cert = new JSONObject();
                cert.put("carteirinha_id", carteirinha.getLong("id"));
                cert.put("certificado", GCABase64.encode(ca.getEncoded()));                              
                certificadosJSON.put(cert);
                System.out.println("Certificado: "+GCABase64.encode(ca.getEncoded()));
                txtLog.append("   criado certificado para id "+carteirinha.getLong("id")+"\n");
                progresbar.setValue(progresbar.getValue()+acrecimo);
            }
            txtLog.append(carteirinhas.length()+" Certificados Criados\n");
            
            txtLog.append("Enviando certificados...\n");
            // Envia certificados para servidor
            RemoteHttp.sendCertificados(new JSONObject().
                    put("certificados", certificadosJSON), token);
            txtLog.append(carteirinhas.length()+" Certificados enviados\n");
            txtLog.append("Concluído\n");
            progresbar.setValue(100);
            
        } catch (IOException ex) {
            new GCAException(ex.getMessage(),"ERRO", JOptionPane.ERROR_MESSAGE);
        } catch(Exception ex){
            txtLog.append(ex.toString());
            progresbar.setValue(0);
        }
    }//GEN-LAST:event_btnExecutarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        if(jTable3.getSelectedRow() != -1 ){
            btnExecutar.setEnabled(true);
        }
    }//GEN-LAST:event_jTable3MouseClicked

    private void populate(){
        List<Item> certificadosItens = KeyStoreLoader.certificadosItems();
        int ik=0;
        dados = new Object[certificadosItens.size()][columnNames.length];
        TableModel model = jTable3.getModel();
        for(Item item : certificadosItens){
            dados[ik][0] = item;
            dados[ik][1] = item.getInitDate();
            dados[ik][2] = item.getEndDate();
            dados[ik][3] = item.getIssuer();
            ik++;
        }
        jTable3.setModel(new javax.swing.table.DefaultTableModel(dados, columnNames));
    }
    
    private AttributeCertificate createCertificado(X509Certificate certificado, 
                                PrivateKey privKey, JSONObject carteirinha){ 
        try {
            // Configura atributos para OID1
            AttributeContentOID1 content1 = new AttributeContentOID1();
            content1.setCpf(carteirinha.getString("cpf"));
            content1.setDataNascimento((new SimpleDateFormat("yyyy-MM-dd")
                    .parse(carteirinha.getString("data_nascimento"))));
            content1.setExpeditorRG(carteirinha.getString("expedidor_rg"));
            content1.setMatricula(carteirinha.getString("matricula"));
            content1.setRg(carteirinha.getString("rg"));
            
            // Configura atributos para OID2
            AttributeContentOID2 content2 = new AttributeContentOID2();
            content2.setCityInstEnsino(carteirinha.getString("cidade_inst_ensino"));
            content2.setCourseName(carteirinha.getString("curso_serie"));
            content2.setEscolaridade(carteirinha.getString("escolaridade"));
            content2.setInstEnsino(carteirinha.getString("instituicao_ensino"));
            content2.setUfInstEnsino(carteirinha.getString("uf_inst_ensino"));
            
            // Configura campos do certificado
            StudentACInfoGenerator info = new StudentACInfoGenerator();
            info.setHolderByParams(certificado.getSubjectDN().getName(), 
                    carteirinha.getString("nome"));          
            info.setIssuerByNomeSubject(certificado.getSubjectDN().getName());           
            info.setSerialNumber(Long.parseLong(carteirinha.getString("numero_serie")));
            info.setNotBefore((new SimpleDateFormat("yyyy-MM-dd"))
                    .parse(carteirinha.getString("nao_antes")));
            info.addMandatoryExtensions(certificado.getPublicKey(), 
                    "http://teste.com.br/validacao", "http://teste.com.br/validacao");
            info.addAttributes(content1, content2);
            
            AttributeCertificateInfo caInfo = info.generateAttributeCertificateInfo();
            AttributeCertificate certificate = ACSigner.sign(caInfo, privKey);
            return certificate;
        } catch (StudentACException ex) {
           new GCAException(ex.getMessage(),"ERRO", JOptionPane.ERROR_MESSAGE); 
        } catch (ParseException ex) {
            new GCAException(ex.getMessage(),"ERRO", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExecutar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable3;
    private javax.swing.JProgressBar progresbar;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables
    private Object[][] dados;
    private final String[] columnNames = {"Emitido Para", "Válido de", "Válido até", "Emitido Por"};
}
